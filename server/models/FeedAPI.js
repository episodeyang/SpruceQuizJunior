'use strict';
/**
 * @fileOverview Feed API module
 * @memberOf User
 * @type {exports}
 */

define(['underscore', '../rolesHelper', 'async', './UserFeed', './SessionFeed', './BookFeed'],
    function (_, rolesHelper, async, UserFeedM, SessionFeedM, BookFeedM) {
        var userRoles = rolesHelper.userRoles;

        var test = {};
        _.extend(test, {keyEntry: undefined});
        console.log(test);

        function errorLog(error, doc) {
            if (error) {
                return console.log(error);
            }
            return doc;
        }
        /**
         * all feeds are generated by users.
         * UserFeed has userId.
         * For BookFeed and SessionFeed, userId = bucket.userId || feed.userId;
         *
         */
        return {
            user: function(user, vote) {},
            questionAdd: function(user, question, sessions, books) {
                if (!user || !question) { return; }
                var typeString = 'questionAdd';
                var stack = [];
                var data = {
                    user: _.pick(user, ['username', 'name']),
                    question: {
                        _id : question._id,
                        title: question.title,
                        text: question.text,
                        tags: question.tags,
                        sessions: sessions,
                        books: books
                    }
                };

                if (!sessions) { delete data.sessions; }
                if (!books) { delete data.books; }

                function userAdd(callback) {
                    return UserFeedM.addFeed(user.username, typeString, _.omit(data, 'user'), callback);
                }
                stack.push(userAdd);

                function makeSessionCallback(sessionId) {
                    function sessionAdd(callback) {
                        return SessionFeedM.addFeed(sessionId, typeString, data, callback);
                    }
                    stack.push(sessionAdd);
                }
                if (sessions) {
                    _.each(sessions, makeSessionCallback);
                }

                function makeBookCallback(book) {
                    function bookAdd(callback) {
                        return BookFeedM.addFeed(book._id, typeString, data, callback);
                    }
                    stack.push(bookAdd);
                }
                if (books) {
                    _.each(books, makeBookCallback);
                }

                async.series(stack, errorLog);
            },
            questionEdit: function(user, question, sessions, books) {
                if (!user || !question) { return; }
                var typeString = 'questionEdit';
                var stack = [];
                var data = {
                    user: _.pick(user, ['username', 'name']),
                    question: {
                        _id : question._id,
                        title: question.title,
                        text: question.text,
                        tags: question.tags,
                        sessions: sessions,
                        books: books
                    }
                };

                if (!sessions) { delete data.sessions; }
                if (!books) { delete data.books; }

                function userAdd(callback) {
                    return UserFeedM.addFeed(user.username, typeString, _.omit(data, 'user'), callback);
                }
                stack.push(userAdd);

                function makeSessionCallback(sessionId) {
                    function sessionAdd(callback) {
                        return SessionFeedM.addFeed(sessionId, typeString, data, callback);
                    }
                    stack.push(sessionAdd);
                }
                if (sessions) {
                    _.each(sessions, makeSessionCallback);
                }

                function makeBookCallback(book) {
                    function bookAdd(callback) {
                        return BookFeedM.addFeed(book._id, typeString, data, callback);
                    }
                    stack.push(bookAdd);
                }
                if (books) {
                    _.each(books, makeBookCallback);
                }

                async.series(stack, errorLog);
            },
            questionGet: function(user, question, sessions, books) {
                if (!user || !question) { return; }
                var typeString = "questionGet";
                var stack = [];
                var data = {
                    user: _.pick(user, ['username', 'name']),
                    question: {
                        _id : question._id,
                        title: question.title
                    }
                };

                if (!sessions) { delete data.sessions; }
                if (!books) { delete data.books; }

                function userAdd(callback) {
                    return UserFeedM.addFeed(user.username, typeString, _.omit(data, 'user'), callback);
                }
                stack.push(userAdd);

                function makeSessionCallback(sessionId) {
                    function sessionAdd(callback) {
                        return SessionFeedM.addFeed(sessionId, typeString, data, callback);
                    }
                    stack.push(sessionAdd);
                }
                if (sessions) {
                    _.each(sessions, makeSessionCallback);
                }

                function makeBookCallback(book) {
                    function bookAdd(callback) {
                        console.log(book);
                        return BookFeedM.addFeed(book._id, typeString, data, callback);
                    }
                    stack.push(bookAdd);
                }
                if (books) {
                    _.each(books, makeBookCallback);
                }

                async.series(stack, errorLog);
            },
            questionVote: function(user, question) {
                if (!user || !question) { return; }
                var typeString = "questionVote";
                var stack = [];
                var data = {
                    user: _.pick(user, ['username', 'name']),
                    question: {
                        _id : question._id,
                        title: question.title
                    }
                };
                function removeUpVote() {
                    if (question.sessions) {
                        data.username = user.username;
                        SessionFeedM.addFeed(question.sessions[0], typeString + ".removeUpVote", data, errorLog);
                        delete data.username;
                        data.sessionId = question.sessions[0];
                    }
                    UserFeedM.addFeed(user.username, typeString + ".removeUpVote", data, errorLog);
                }
                function upVote() {
                    if (question.sessions) {
                        data.username = user.username;
                        SessionFeedM.addFeed(question.sessions[0], typeString + ".upVote", data, errorLog);
                        delete data.username;
                        data.sessionId = question.sessions[0];
                    }
                    UserFeedM.addFeed(user.username, typeString + ".upVote", data, errorLog);
                }
                function removeDownVote() {
                    if (question.sessions) {
                        data.username = user.username;
                        SessionFeedM.addFeed(question.sessions[0], typeString + ".removeDownVote", data, errorLog);
                        delete data.username;
                        data.sessionId = question.sessions[0];
                    }
                    UserFeedM.addFeed(user.username, typeString + ".removeDownVote", data, errorLog);
                }
                function downVote() {
                    if (question.sessions) {
                        data.username = user.username;
                        SessionFeedM.addFeed(question.sessions[0], typeString + ".downVote", data, errorLog);
                        delete data.username;
                        data.sessionId = question.sessions[0];
                    }
                    UserFeedM.addFeed(user.username,  typeString + ".downVote", data, errorLog);
                }
                return {
                    removeUpVote: removeUpVote,
                    upVote: upVote,
                    removeDownVote: removeDownVote,
                    downVote: downVote
                };
            },
            commentAdd: function(user, comment) {
                if (!user || !comment) { return }
                var typeString = "commentAdd";
                var data = {
                    id : comment._id,
                    title: comment.text
                };
                UserFeedM.addFeed(user.username, typeString, data, errorLog);
            },
            answer: function(user, answer) {},
            answerComment: function(user, comment) {},
            session: function(user, comment) {},
            book: function(user, comment) {},
            school: function(user, comment) {}
        };
    });


