'use strict';
/**
 * @fileOverview Feed API module
 * @memberOf User
 * @type {exports}
 */

define(['underscore', '../rolesHelper', 'async', './UserFeed', './SessionFeed', './BookFeed'],
    function (_, rolesHelper, async, UserFeedM, SessionFeedM, BookFeedM) {
        var userRoles = rolesHelper.userRoles;

        var test = {};
        _.extend(test, {keyEntry: undefined});
        console.log(test);

        function errorLog(error, doc) {
            if (error) {
                return console.log(error);
            }
            return doc;
        }

        function stackMaker(typeString, stack, data, user, sessions, books) {
            if (!sessions) {
                delete data.sessions;
            }
            if (!books) {
                delete data.books;
            }

            function userAdd(callback) {
                return UserFeedM.addFeed(user.username, typeString, _.omit(data, 'user'), callback);
            }

            stack.push(userAdd);

            function makeSessionCallback(sessionId) {
                function sessionAdd(callback) {
                    return SessionFeedM.addFeed(sessionId, typeString, _.omit(data, 'sessions'), callback);
                }

                stack.push(sessionAdd);
            }

            if (sessions) {
                _.each(sessions, makeSessionCallback);
            }

            function makeBookCallback(book) {
                function bookAdd(callback) {
                    return BookFeedM.addFeed(book._id, typeString, _.omit(data, 'books'), callback);
                }

                stack.push(bookAdd);
            }

            if (books) {
                _.each(books, makeBookCallback);
            }

            return stack;
        }

        /**
         * all feeds are generated by users.
         * UserFeed has userId.
         * For BookFeed and SessionFeed, userId = bucket.userId || feed.userId;
         *
         */
        return {
            user: function (user, vote) {
            },
            questionAdd: function (user, question, sessions, books) {
                if (!user || !question) {
                    return;
                }
                var typeString = 'questionAdd';
                var stack = [];
                var data = {
                    user: _.pick(user, ['username', 'name']),
                    question: {
                        _id: question._id,
                        title: question.title,
                        text: question.text,
                        tags: question.tags
                    },
                    sessions: sessions,
                    books: books
                };

                stackMaker(typeString, stack, data, user, sessions, books);
                console.log(stack);

                async.series(stack, errorLog);
            },
            questionEdit: function (user, question, sessions, books) {
                if (!user || !question) {
                    return;
                }
                var typeString = 'questionEdit';
                var stack = [];
                var data = {
                    user: _.pick(user, ['username', 'name']),
                    question: {
                        _id: question._id,
                        title: question.title,
                        text: question.text,
                        tags: question.tags
                    },
                    sessions: sessions,
                    books: books
                };

                stackMaker(typeString, stack, data, user, sessions, books);
                async.series(stack, errorLog);
            },
            questionGet: function (user, question, sessions, books) {
                if (!user || !question) {
                    return;
                }
                var typeString = "questionGet";
                var stack = [];
                var data = {
                    user: _.pick(user, ['username', 'name']),
                    question: {
                        _id: question._id,
                        title: question.title
                    }
                };

                stackMaker(typeString, stack, data, user, sessions, books);
                async.series(stack, errorLog);
            },
            questionVote: function (user, question, sessions, books) {
                if (!user || !question) {
                    return;
                }
                var typeString = "questionVote";
                var stack = [];
                var data = {
                    user: _.pick(user, ['username', 'name']),
                    question: {
                        _id: question._id,
                        title: question.title
                    }
                };

                function removeUpVote() {
                    typeString += ".removeUpVote";
                    stackMaker(typeString, stack, data, user, sessions, books);
                    async.series(stack, errorLog);
                }

                function upVote() {
                    typeString += ".upVote";
                    stackMaker(typeString, stack, data, user, sessions, books);
                    async.series(stack, errorLog);
                }

                function removeDownVote() {
                    typeString += ".removeDownVote";
                    stackMaker(typeString, stack, data, user, sessions, books);
                    async.series(stack, errorLog);
                }

                function downVote() {
                    typeString += ".downVote";
                    stackMaker(typeString, stack, data, user, sessions, books);
                    async.series(stack, errorLog);
                }

                return {
                    removeUpVote: removeUpVote,
                    upVote: upVote,
                    removeDownVote: removeDownVote,
                    downVote: downVote
                };
            },
            questionRemove: function (user, question, sessions, books) {
                if (!user || !question) {
                    return;
                }
                var typeString = "questionRemove";
                var stack = [];
                var data = {
                    user: _.pick(user, ['username', 'name']),
                    question: {
                        _id: question._id,
                        title: question.title,
                        text: question.text,
                        tags: question.tags
                    }
                };

                stackMaker(typeString, stack, data, user, sessions, books);
                async.series(stack, errorLog);
            },
            commentAdd: function (user, comment, sessions, books) {
                if (!user || !comment) {
                    return;
                }
                var stack = [];
                var typeString = "commentAdd";
                var data = {
                    user: _.pick(user, ['username', 'name']),
                    question: {
                        _id: question._id,
                        title: question.title
                    },
                    comment: _.pick(comment, ['_id', 'text'])
                };
                stackMaker(typeString, stack, data, user, sessions, books);
                async.series(stack, errorLog);
            },
            commentEdit: function (user, comment, sessions, books) {
                if (!user || !comment) {
                    return;
                }
                var stack = [];
                var typeString = "commentEdit";
                var data = {
                    user: _.pick(user, ['username', 'name']),
                    question: {
                        _id: question._id,
                        title: question.title
                    },
                    comment: _.pick(comment, ['_id', 'text'])
                };
                stackMaker(typeString, stack, data, user, sessions, books);
                async.series(stack, errorLog);
            },
            commentVote: function (user, comment, sessions, books) {
                if (!user || !comment) {
                    return;
                }
                var stack = [];
                var typeString = "commentEdit";
                var data = {
                    user: _.pick(user, ['username', 'name']),
                    question: {
                        _id: question._id,
                        title: question.title
                    },
                    comment: _.pick(comment, ['_id', 'text'])
                };

                function removeUpVote() {
                    typeString += ".removeUpVote";
                    stackMaker(typeString, stack, data, user, sessions, books);
                    async.series(stack, errorLog);
                }

                function upVote() {
                    typeString += ".upVote";
                    stackMaker(typeString, stack, data, user, sessions, books);
                    async.series(stack, errorLog);
                }

                function removeDownVote() {
                    typeString += ".removeDownVote";
                    stackMaker(typeString, stack, data, user, sessions, books);
                    async.series(stack, errorLog);
                }

                function downVote() {
                    typeString += ".downVote";
                    stackMaker(typeString, stack, data, user, sessions, books);
                    async.series(stack, errorLog);
                }

                return {
                    removeUpVote: removeUpVote,
                    upVote: upVote,
                    removeDownVote: removeDownVote,
                    downVote: downVote
                };
            },
            // todo: answer skeleton code
            answer: function (user, answer, sessions, books) {
                if (!user || !answer) {
                    return;
                }
                var stack = [];
                var typeString = "commentAdd";
                var data = {
                    user: _.pick(user, ['username', 'name']),
                    question: {
                        _id: question._id,
                        title: question.title
                    },
                    answer: _.pick(answer, ['_id', 'text'])
                };
                stackMaker(typeString, stack, data, user, sessions, books);
                async.series(stack, errorLog);
            },
            // todo: answerComment skeleton code
            answerComment: function (user, answerComment, sessions, books) {
                if (!user || !answerComment) {
                    return;
                }
                var stack = [];
                var typeString = "commentAdd";
                var data = {
                    user: _.pick(user, ['username', 'name']),
                    question: {
                        _id: question._id,
                        title: question.title
                    },
                    answerComment: _.pick(answerComment, ['_id', 'text'])
                };
                stackMaker(typeString, stack, data, user, sessions, books);
                async.series(stack, errorLog);
            },
            // todo: session skeleton code
            session: function (user, session, books) {
                if (!user || !session) {
                    return;
                }
                var stack = [];
                var typeString = "commentAdd";
                var data = {
                    user: _.pick(user, ['username', 'name']),
                    session: _.pick(session, ['_id', 'name', 'overview'])
                };
                stackMaker(typeString, stack, data, user, null, books);
                async.series(stack, errorLog);
            },
            // todo: book skeleton code
            book: function (user, book, sessions) {
                if (!user || !book) {
                    return;
                }
                var stack = [];
                var typeString = "commentAdd";
                var data = {
                    user: _.pick(user, ['username', 'name']),
                    book: _.pick(book, ['_id', 'title', 'authors', 'overview'])
                };
                stackMaker(typeString, stack, data, user, books, null);
                async.series(stack, errorLog);
            },
            // todo: school skeleton code
            school: function (user, school, sessions, books) {
                if (!user || !school) {
                    return;
                }
                var stack = [];
                var typeString = "commentAdd";
                var data = {
                    user: _.pick(user, ['username', 'name']),
                    schools: _.pick(school, ['name', 'overview'])
                };
                stackMaker(typeString, stack, data, user, books, null);
                async.series(stack, errorLog);
            }
        };
    });


